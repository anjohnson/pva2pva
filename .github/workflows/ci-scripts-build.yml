# .github/workflows/ci-scripts-build.yml for use with EPICS Base ci-scripts
# (see: https://github.com/epics-base/ci-scripts)

# This is YAML - indentation levels are crucial

# Workflow name

name: Base

# Trigger on pushes and PRs to any branch
on:
  push:
    paths-ignore:
      - .appveyor.yml
  pull_request:

env:
    SETUP_PATH: .ci-local:.ci
    EPICS_TEST_IMPRECISE_TIMING: YES

jobs:
  native:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    # Set environment variables from matrix parameters
    env:
      BASE: ${{ matrix.base }}
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
      CI_CROSS_TARGETS: ${{ matrix.cross }}
      EXTRA: ${{ matrix.extra }}
      TEST: ${{ matrix.test }}
    strategy:
      fail-fast: false
      matrix:
        # Job names also name artifacts, character limitations apply
        include:
          - os: ubuntu-24.04
            cmp: gcc
            base: "7.0"
            name: "7.0 Ub-24 gcc c++20 Werror"
            # Turn all warnings into errors,
            # except for those we could not fix (yet).
            # Remove respective -Wno-error=... flag once it is fixed.
            extra: "CMD_CXXFLAGS=-std=c++20
                    CMD_CPPFLAGS='-fdiagnostics-color
                                  -fstack-protector-strong
                                  -Wformat
                                  -Werror
                                  -Werror=format-security
                                  -Wno-error=deprecated-declarations
                                  -Wno-error=stringop-truncation
                                  -Wno-error=restrict
                                  -Wno-error=sizeof-pointer-memaccess
                                  -Wno-error=nonnull
                                  -Wno-error=dangling-pointer
                                  -Wno-error=format-overflow
                                  -Wno-error=stringop-overread
                                  -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3'
                    CMD_LDFLAGS=-Wl,-z,relro"

          - os: ubuntu-22.04
            cmp: gcc
            configuration: default
            base: "7.0"
            cross: "windows-x64-mingw"
            name: "7.0 Ub-22 gcc + MinGW"

          - os: ubuntu-22.04
            cmp: gcc
            configuration: static
            base: "7.0"
            cross: "windows-x64-mingw"
            name: "7.0 Ub-22 gcc + MinGW, static"

          - os: ubuntu-22.04
            cmp: gcc
            configuration: default
            base: "3.15"
            wine: "64"
            name: "3.15 Ub-22 gcc + MinGW"

          - os: ubuntu-22.04
            cmp: gcc
            configuration: static
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"
            name: "7.0 Ub-22 gcc C++11, static"

          - os: ubuntu-22.04
            cmp: clang
            configuration: default
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"
            name: "7.0 Ub-22 clang C++11"

          - os: ubuntu-22.04
            cmp: gcc
            configuration: default
            base: "7.0"
            cross: "RTEMS-pc386-qemu@4.10"
            name: "7.0 Ub-22 gcc + RT-4.10"

          - os: ubuntu-22.04
            cmp: gcc
            configuration: default
            base: "7.0"
            cross: "RTEMS-pc386-qemu@4.9"
            name: "7.0 Ub-22 gcc + RT-4.9"

          - os: ubuntu-22.04
            cmp: clang
            configuration: default
            base: "7.0"
            name: "7.0 Ub-22 clang"

          - os: macos-latest
            cmp: clang
            configuration: default
            base: "7.0"
            name: "7.0 MacOS clang"

          - os: windows-2019
            cmp: vs2019
            configuration: default
            base: "7.0"
            name: "7.0 Win2019 MSC-19"

          - os: windows-2019
            cmp: vs2019
            configuration: static
            base: "7.0"
            name: "7.0 Win2019 MSC-19, static"

          - os: windows-2019
            cmp: gcc
            configuration: static
            base: "7.0"
            name: "7.0 Win2019 mingw, static"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: "apt-get install"
      run: |
        sudo apt-get update
        sudo apt-get -y install qemu-system-x86 g++-mingw-w64-x86-64 gdb
      if: runner.os == 'Linux'
    - name: Prepare and compile dependencies
      run: python .ci/cue.py prepare
    - name: Build main module
      run: python .ci/cue.py build
    - name: Run main module tests
      run: python .ci/cue.py test
    - name: Upload tapfiles Artifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: tapfiles ${{ matrix.name }}
        path: '**/O.*/*.tap'
        if-no-files-found: ignore
    - name: Collect and show test results
      if: ${{ always() }}
      run: python .ci/cue.py test-results

  docker:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
    # Set environment variables from matrix parameters
    env:
      BASE: ${{ matrix.base }}
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
      EXTRA: ${{ matrix.extra }}
      TEST: ${{ matrix.test }}
    strategy:
      fail-fast: false
      matrix:
        # Job names also name artifacts, character limitations apply
        include:
          - name: "CentOS-8"
            image: centos:8
            cmp: gcc
            base: "7.0"
            configuration: default

          - name: "Rocky-9"
            image: rockylinux:9
            cmp: gcc
            base: "7.0"
            configuration: default

          - name: "Fedora-33"
            image: fedora:33
            cmp: gcc
            base: "7.0"
            configuration: default

          - name: "Fedora-latest"
            image: fedora:latest
            cmp: gcc
            base: "7.0"
            configuration: default

    steps:
    - name: "Fix repo URLs on CentOS-8"
      # centos:8 is frozen, repos are in the vault
      if: matrix.image=='centos:8'
      run: |
        sed -i -e "s|mirrorlist=|#mirrorlist=|" \
        -e "s|#baseurl=http://mirror|baseurl=http://vault|" \
        /etc/yum.repos.d/CentOS-Linux-{BaseOS,AppStream,Extras,Plus}.repo

    - name: "Redhat setup"
      run: |
        dnf -y install python3 gdb make perl gcc-c++ glibc-devel readline-devel ncurses-devel perl-devel libevent-devel net-tools
        git --version || dnf -y install git
        python3 --version

    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Prepare and compile dependencies
      run: python3 .ci/cue.py prepare
    - name: Build main module
      run: python3 .ci/cue.py build
    - name: Run main module tests
      run: python3 .ci/cue.py test

    - name: "Upload tapfiles Artifact"
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: tapfiles ${{ matrix.name }}
        path: '**/O.*/*.tap'
        if-no-files-found: ignore
    - name: "Collect and show test results"
      if: ${{ always() }}
      run: python3 .ci/cue.py test-results
